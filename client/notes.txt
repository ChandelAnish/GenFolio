Why Convert a File to a Data URL (Base64)?
    1️⃣ Direct Preview in the Browser
            - A file (like an image) is stored on the user's device, and browsers can’t display raw files directly.
            - readAsDataURL(file) converts the image into a Base64 string, which can be directly assigned to an <img> tag.
    2️⃣ No Need for a Temporary File Storage
            - Instead of uploading the file and getting a URL from the server, you generate a temporary URL using Base64.
            - This is useful for instant previews in forms before uploading.



****In Next.js App Router (app directory), API route handlers only receive req (not res).

****Whenever you return an object inside an arrow function without return, use () to enclose it.
        - In JavaScript, when using an arrow function without curly braces ({}), the function implicitly returns whatever comes after =>.
        - However, if you want to return an object, you need to wrap it in parentheses (()) because curly braces {} are interpreted as a function body, not an object.



***setProfileData((prev) => ({ ...prev, [name]: value }));
        -> the square brackets around [name] are necessary in this context. This is using JavaScript's computed property name syntax, and here's why it's needed:
        -> When you write [name]: value, you're using the variable name to dynamically determine which property of the object to update.



*In Tailwind CSS, the space-y-4 class is used to add vertical spacing between child elements inside a container.



*reduce function:

        The reduce function in JavaScript is used to take an array and reduce it to a single value. It works by applying a function to each element in the array, carrying forward a cumulative result.

        How It Works 
                - It goes through each item in the array.
                - It keeps adding (or processing) the items based on the given function.
                - It finally returns a single value.

        Syntax:
                array.reduce(callback, initialValue)
                        - callback: A function that runs on each element.
                        - initialValue: The starting value (optional but recommended)

        Example: Sum of Numbers

                const numbers = [1, 2, 3, 4, 5];
                const sum = numbers.reduce((accumulator, currentValue) => {
                return accumulator + currentValue;
                }, 0);
                console.log(sum); // Output: 15

                - accumulator starts at 0 (initial value).
                - currentValue goes through each number.
                - Adds each number to accumulator, resulting in 15.



*Record:
        - Record is a utility type in TypeScript.
        - It allows you to define the types for the keys and values of an object.

        eg: The Record<string, Skill[]> is a TypeScript type that defines an object where:
                - The keys are strings (string).
                - The values are arrays of Skill objects (Skill[]).



*flat() function:
        The flat() function in JavaScript is used to flatten an array, meaning it removes nested arrays and creates a single-level array.

        Example : 
                const arr = [1, 2, [3, 4], [5, 6]];
                const flatArr = arr.flat();
                console.log(flatArr); // Output: [1, 2, 3, 4, 5, 6]



*sessionStorage.getItem('profileData') can return null if the key does not exist in the storage. However, JSON.parse() expects a string as its argument, and null is not a valid input for it.

        Fix:
                Use the nullish coalescing (??) or logical OR (||) operator to provide a fallback value:

                        const a = JSON.parse(sessionStorage.getItem('profileData') ?? '{}');







***Making API Calls in a Next.js route.ts File
        -> Since route.ts files are server-side route handlers in Next.js App Router (app/api), you can make backend-to-backend API calls using libraries like fetch or axios.
        -> ✅ Works for: Calling external APIs (e.g., third-party APIs, internal microservices).
        -> ❌ Doesn't Work for: Calling the same API route from itself (causes infinite loop).
        -> If you want to call your own Next.js API route from another API route (route.ts), you should directly import the function instead of making an HTTP request.


***revalidatePath() --> is a Next.js function used in server actions to clear the cached data for a specific route and force a fresh data fetch. When you use revalidatePath('/tasks'), you're telling Next.js to:

        - Clear the cached data for the '/tasks' route
        - Trigger a fresh server-side render of that page
        - Ensure that any subsequent data fetches on that route will pull the most recent data from the database

        If you are using Next.js App Router (with React Server Components and caching), deleting a task and revalidating the path will not immediately update the UI unless you handle state updates properly. Here’s what happens:

        Static Data Fetching (getServerSideProps or fetch with caching)

                - If you fetch data with fetch('/api/tasks'), Next.js may cache the response.
                - When you delete a task, you must revalidate the cache using:
                        import { revalidatePath } from "next/cache";
                        revalidatePath("/tasks");
                - This ensures that when the user navigates, they get the updated data.