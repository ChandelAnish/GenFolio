Why Convert a File to a Data URL (Base64)?
    1️⃣ Direct Preview in the Browser
            - A file (like an image) is stored on the user's device, and browsers can’t display raw files directly.
            - readAsDataURL(file) converts the image into a Base64 string, which can be directly assigned to an <img> tag.
    2️⃣ No Need for a Temporary File Storage
            - Instead of uploading the file and getting a URL from the server, you generate a temporary URL using Base64.
            - This is useful for instant previews in forms before uploading.



****In Next.js App Router (app directory), API route handlers only receive req (not res).

****Whenever you return an object inside an arrow function without return, use () to enclose it.
        - In JavaScript, when using an arrow function without curly braces ({}), the function implicitly returns whatever comes after =>.
        - However, if you want to return an object, you need to wrap it in parentheses (()) because curly braces {} are interpreted as a function body, not an object.



***setProfileData((prev) => ({ ...prev, [name]: value }));
        -> the square brackets around [name] are necessary in this context. This is using JavaScript's computed property name syntax, and here's why it's needed:
        -> When you write [name]: value, you're using the variable name to dynamically determine which property of the object to update.



*In Tailwind CSS, the space-y-4 class is used to add vertical spacing between child elements inside a container.



*reduce function:

        The reduce function in JavaScript is used to take an array and reduce it to a single value. It works by applying a function to each element in the array, carrying forward a cumulative result.

        How It Works 
                - It goes through each item in the array.
                - It keeps adding (or processing) the items based on the given function.
                - It finally returns a single value.

        Syntax:
                array.reduce(callback, initialValue)
                        - callback: A function that runs on each element.
                        - initialValue: The starting value (optional but recommended)

        Example: Sum of Numbers

                const numbers = [1, 2, 3, 4, 5];
                const sum = numbers.reduce((accumulator, currentValue) => {
                return accumulator + currentValue;
                }, 0);
                console.log(sum); // Output: 15

                - accumulator starts at 0 (initial value).
                - currentValue goes through each number.
                - Adds each number to accumulator, resulting in 15.



*Record:
        - Record is a utility type in TypeScript.
        - It allows you to define the types for the keys and values of an object.

        eg: The Record<string, Skill[]> is a TypeScript type that defines an object where:
                - The keys are strings (string).
                - The values are arrays of Skill objects (Skill[]).



*flat() function:
        The flat() function in JavaScript is used to flatten an array, meaning it removes nested arrays and creates a single-level array.

        Example : 
                const arr = [1, 2, [3, 4], [5, 6]];
                const flatArr = arr.flat();
                console.log(flatArr); // Output: [1, 2, 3, 4, 5, 6]



*sessionStorage.getItem('profileData') can return null if the key does not exist in the storage. However, JSON.parse() expects a string as its argument, and null is not a valid input for it.

        Fix:
                Use the nullish coalescing (??) or logical OR (||) operator to provide a fallback value:

                        const a = JSON.parse(sessionStorage.getItem('profileData') ?? '{}');







***Making API Calls in a Next.js route.ts File
        -> Since route.ts files are server-side route handlers in Next.js App Router (app/api), you can make backend-to-backend API calls using libraries like fetch or axios.
        -> ✅ Works for: Calling external APIs (e.g., third-party APIs, internal microservices).
        -> ❌ Doesn't Work for: Calling the same API route from itself (causes infinite loop).
        -> If you want to call your own Next.js API route from another API route (route.ts), you should directly import the function instead of making an HTTP request.


***revalidatePath() --> is a Next.js function used in server actions to clear the cached data for a specific route and force a fresh data fetch. When you use revalidatePath('/tasks'), you're telling Next.js to:

        - Clear the cached data for the '/tasks' route
        - Trigger a fresh server-side render of that page
        - Ensure that any subsequent data fetches on that route will pull the most recent data from the database

        If you are using Next.js App Router (with React Server Components and caching), deleting a task and revalidating the path will not immediately update the UI unless you handle state updates properly. Here’s what happens:

        Static Data Fetching (getServerSideProps or fetch with caching)

                - If you fetch data with fetch('/api/tasks'), Next.js may cache the response.
                - When you delete a task, you must revalidate the cache using:
                        import { revalidatePath } from "next/cache";
                        revalidatePath("/tasks");
                - This ensures that when the user navigates, they get the updated data.
---------------

🧠 What are Clerk session claims?
        Think of session claims as extra information you attach to a logged-in user’s session.

📦 Example:
        Imagine you have a user logged in, and you want to remember:

                - If they’ve created their portfolio
                - Their user role (admin/user)
                - Their preferred theme (dark/light)

        You can store these facts as claims in their session.

🔑 Real-life analogy:
        It’s like giving someone a visitor badge that says:

                ✅ You’re allowed in (logged in)
                👤 You’re an admin
                🎨 You like dark mode

        These "badges" are claims stored in their session.

🔍 Where can you use them?
        You can read session claims:

                - In middleware (to redirect users)
                - In API routes (to check permissions)
                - In server components (to customize what they see)

✅ Example in code:

        // Set a claim (like "hasPortfolio: true") for the current user
        await clerkClient.users.updateUserMetadata(userId, {
          publicMetadata: {
            hasPortfolio: true,
          },
        });
        
        Later, check this in middleware:

        const hasPortfolio = sessionClaims?.publicMetadata?.hasPortfolio;

📝 Types of Claims:
        Type	                Use for	                        Accessible by

        publicMetadata	        General user info	        Frontend + Backend
        privateMetadata	        Sensitive info	Backend         only
        unsafeMetadata	        Internal/debug use	        Backend only


Add a Session Claim in Clerk

        🔹 1. Import clerkClient
                        import { clerkClient } from "@clerk/nextjs/server"; // or "@clerk/backend" if using backend-only
        🔹 2. Update the user’s metadata
                        For example, let’s say you want to set a hasPortfolio flag for a user:

                        await clerkClient.users.updateUserMetadata(userId, {
                        publicMetadata: {
                        hasPortfolio: true,
                        },
                        });

**clerkClient from @clerk/nextjs/server ➝ Not available / not exported, that's why you get a TypeScript error.
**clerkClient from @clerk/clerk-sdk-node ➝ ✅ The correct one to use in API routes, server actions, and app/api functions.

1. @clerk/nextjs/server
        Designed for middleware and route handlers in Next.js apps.

        Exports things like:

                - auth() – for getting session info
                - currentUser() – gets current signed-in user
                - redirectToSignIn – for handling redirects

        ❌ Does not export a full clerkClient, so using clerkClient.users... from this will throw:
        Property 'users' does not exist on type '() => Promise<ClerkClient>'

2. @clerk/clerk-sdk-node
        Meant for server-side Node.js code, including:

                - API routes (app/api/...)
                - Custom backend logic
                - Serverless functions

        ✅ Exports clerkClient, which gives you access to the full Clerk backend SDK:

        import { clerkClient } from "@clerk/clerk-sdk-node";

        await clerkClient.users.updateUserMetadata(userId, {
          publicMetadata: {
            hasPortfolio: true,
          },
        });

Get logged-in user's ID/session	                -->     @clerk/nextjs/server
Update or manage user info (like metadata)	-->     @clerk/clerk-sdk-node




🔍 What exactly are session claims in Clerk?
        In Clerk, session claims are bits of data (like userId, publicMetadata, etc.) that are embedded in the session token (JWT). They're read-only in middleware using auth().

        There are two main sources of claims:

        1) Standard claims like userId, email, roles, etc.
        2) Custom claims (e.g., hasPortfolio: true) that you put into:

                 - publicMetadata
                 - privateMetadata
                 - sessionClaims (if using updateSession)

        🔐 Persistence rules:
                Claim Type	Persistence Scope	           Survives Logout?	        Editable?	Usage in Middleware

                - publicMetadata	Stored in user object	        ✅ Yes	                ✅ Yes	        ✅ Yes
                - privateMetadata	Stored in user object	        ✅ Yes	                ✅ Yes	        ❌ No (middleware can't access)
                - sessionClaims	        Stored in the session JWT	❌ No	                ✅ Yes	        ✅ Yes

        So:
                - publicMetadata is best if you want persistent state (like hasPortfolio) available even after logout.
                - sessionClaims are useful for temporary per-session custom data (e.g., a flag during a checkout flow).


✅ publicMetadata.hasPortfolio will persist:
        Yes, anything stored in publicMetadata (like hasPortfolio: true) will remain attached to the user’s account permanently — until you explicitly change or remove it using:

        await clerkClient.users.updateUserMetadata(userId, {
          publicMetadata: {
            hasPortfolio: false, // or remove this key
          },
        });

🔁 When will it disappear?
        ❌ It does NOT expire automatically.
        ❌ It is NOT cleared when the user logs out or their session expires.
        ✅ It stays stored in Clerk’s backend tied to that user’s account.

        So unless you or your code removes/updates that metadata, it will always exist.

⏱ If you want temporary flags…
        If you ever need a temporary state that expires with the session, then you should use sessionClaims instead — they are tied to the session token and disappear when the session ends.

Summary:
        Type	        Persists after logout?	        Expires automatically?	        Where stored?

        publicMetadata	✅ Yes	                                ❌ No	                Clerk user object
        sessionClaims	❌ No	                                ✅ Yes (with session)	JWT session token



✅ What is publicMetadata?
        - It’s stored data attached to the user in Clerk.
        - You can think of it like a "profile extension" — data you can set yourself, like:
        - It lives on the user object in Clerk.

✅ What is sessionClaims?
        - It's a snapshot of key data about the user at the time they logged in, including:
        - Their userId
        - Their email
        - Any metadata Clerk puts there (like roles, permissions)
        - And optionally: publicMetadata, privateMetadata, etc.

❓Why is publicMetadata inside sessionClaims?
        Because when the session is created (i.e., the user signs in), Clerk includes a copy of the user’s publicMetadata in the sessionClaims.

        This lets you quickly access data without hitting Clerk’s API — but it's a static snapshot, not live.

🔁 Problem
When you update publicMetadata later (e.g. after user builds portfolio), the sessionClaims:

        - Don't update automatically
        - Still show the old values (unless the session is refreshed)


✅ Best Solution: Fetch publicMetadata manually in middleware instead of relying on sessionClaims
        Since sessionClaims won't immediately reflect the updated metadata, the safest and smoothest approach is to fetch the full user object using clerkClient.users.getUser(userId) in your middleware.

✨ Here's how you can do it:

        import { clerkClient } from '@clerk/clerk-sdk-node'

        export default clerkMiddleware(async (auth, req) => {

                // Instead of relying on sessionClaims
                const user = await clerkClient.users.getUser(userId);
                const hasPortfolio = user.publicMetadata?.hasPortfolio;

        });

        ✅ Why this works better:
                ✅ No need to sign out/in
                ✅ Gets the latest publicMetadata instantly
                ✅ User experience is smooth — they can generate their portfolio and be redirected without interruption